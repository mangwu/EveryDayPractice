// 实现一个基本的计算器来计算简单的表达式字符串。
// 表达式字符串只包含非负整数，算符 +、-、*、/ ，左括号 ( 和右括号 ) 。整数除法需要 向下截断 。
// 你可以假定给定的表达式总是有效的。所有的中间结果的范围为 [-2^31, 2^31 - 1] 。
// 提示：
// 1 <= s <= 10^4
//  s 由整数、'+'、'-'、'*'、'/'、'(' 和 ')' 组成
//  s 是一个 有效的 表达式

/**
 * @param {string} s
 * @return {number}
 */
var calculate = function (s) {
  // 此题包含括号，它会影响+，-的优先级
  // 基本计算器I，中没有*，\，所以可以将括号展开解决
  // 这里进行处理时，包含如下优先级
  // 1. 先括号
  // 2. 再乘除
  // 3. 最后加减
  // 一种解法是为所有连续的 * \运行单元添加左右括号，
  // 将三种优先级状态改为两种：先处理括号内的，然后展开
  const n = s.length;
  const strArr = [];
  for(let i = 0; i < n; i++) {
    // if(strArr[i] === "*")
  }
};

// 输入：s = "1-(2+6*3+5-(3*14/((3-5)*2))*5)+3"
//  1 - (2 + 18 + 5 - (42 / (-2 * 2)) * 5) + 3
//  1 - (25 + 50) + 3
//  -71
