/*
 * @Author: mangwu                                                             *
 * @File: main.js                                                              *
 * @Date: 2022-04-11 16:39:48                                                  *
 * @LastModifiedDate: 2022-04-11 17:29:13                                      *
 * @ModifiedBy: mangwu                                                         *
 * -----------------------                                                     *
 * Copyright (c) 2022 mangwu                                                   *
 * -----------------------                                                     *
 * @HISTORY:                                                                   *
 * Date   	            By 	    Comments                                       *
 * ---------------------	--------	----------------------------------------------- *
 */
// 给你一个整数 n ，统计并返回各位数字都不同的数字 x 的个数，其中 0 <= x < 10n 。
/**
 * @param {number} n
 * @return {number}
 */
var countNumbersWithUniqueDigits = function (n) {
  // x的范围只有如下情况
  // [0,1) n = 0 去除0个
  // [0,10) n = 1 去除 0个
  // [0, 100) n = 2 去除 9 个
  // [0,1000) n = 3; 去除 9 + 9 * (9 + 10 + 10) - 9 * 2 + 9
  // [0,10000) n = 4; 去除 9 + 9 * (9 + 10 + 10) - 9 * 2 + 9 + 243 * (9 + 10 + 10 + 10) - 9 * 3 + 9
};

// 100 200 --- 900

// 111 211 --- 911
// 122 222 --- 922
// ...
// 199 299 --- 999

// 101 111 121 --- 191
// 202 212 222 --- 292
// ...
// 909 919 929 --- 999

// 110 111 112 --- 119
// 220 221 222 --- 229
// ...
// 990 991 992 --- 999

// 重复了111 - 999

//
//

/**
 * @param {number} n
 * @return {number}
 */
var countNumbersWithUniqueDigits = function (n) {
  if (n <= 1) {
    return Math.pow(10, n);
  }
  // 选取的数字没有重复的概率如下
  // (1/10)*(10/10) + (9/10)(9/10) = 91 / 100    2
  // (1/10)*(pre) + (9/10)*(9/10)*(8/10);    3
  // (1/10)*(pre) + (9/10)*(9/10)*(8/10)*(7/10);    4
  // 9 * 9 * 8 * 7 * 6 * 5 * 4 * 3    8
  const dp = new Array(n + 1).fill(0);
  dp[2] = 91;
  for (let i = 3; i <= n; i++) {
    let mutil = 9 * 9;
    for (let j = 1; j <= i - 2; j++) {
      mutil *= 9 - j;
    }
    dp[i] = dp[i - 1] + mutil;
  }
  return dp[n];
};
