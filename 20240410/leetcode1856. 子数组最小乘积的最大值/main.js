/*
 * @Author: mangwu                                                             *
 * @File: main.js                                                              *
 * @Date: 2024-04-10 16:35:25                                                  *
 * @LastModifiedDate: 2024-04-10 17:37:53                                      *
 * @ModifiedBy: mangwu                                                         *
 * -----------------------                                                     *
 * Copyright (c) 2024 mangwu                                                   *
 * -----------------------                                                     *
 * @HISTORY:                                                                   *
 * Date   	            By 	    Comments                                       *
 * ---------------------	--------	----------------------------------------------- *
 */


// 一个数组的 最小乘积 定义为这个数组中 最小值 乘以 数组的 和 。

// 比方说，数组 [3,2,5] （最小值是 2）的最小乘积为 2 * (3+2+5) = 2 * 10 = 20 。
// 给你一个正整数数组 nums ，请你返回 nums 任意 非空子数组 的最小乘积 的 最大值 。由于答案可能很大，请你返回答案对  109 + 7 取余 的结果。

// 请注意，最小乘积的最大值考虑的是取余操作 之前 的结果。题目保证最小乘积的最大值在 不取余 的情况下可以用 64 位有符号整数 保存。

// 子数组 定义为一个数组的 连续 部分。

/**
 * @param {number[]} nums
 * @return {number}
 */
var maxSumMinProduct = function(nums) {
  // 通过优先队列可以获取到当前数组的最小值
  // 
};

// [1,2,3,2]
// 1  => 1
// 1 2 => 3
// 1 2 3 => 6
// 1 2 3 2 => 8
// 2 3 2 => 14
// 3 2 => 12

// [5,1,2,3,4,3,2]
// 5 => 25
// 5 1 => 6
// 1  => 1
// 1 2 => 3
// 2 => 4
// 2 3 => 10
// 2 3 4 => 18
// 3 4 => 21
// 3 4 3 => 30
// 3 4 3 2 => 