/*
 * @Author: mangwu                                                             *
 * @File: main.js                                                              *
 * @Date: 2023-06-08 08:40:32                                                  *
 * @LastModifiedDate: 2023-06-08 10:05:44                                      *
 * @ModifiedBy: mangwu                                                         *
 * -----------------------                                                     *
 * Copyright (c) 2023 mangwu                                                   *
 * -----------------------                                                     *
 * @HISTORY:                                                                   *
 * Date   	            By 	    Comments                                       *
 * ---------------------	--------	----------------------------------------------- *
 */

// 你是一位施工队的工长，根据设计师的要求准备为一套设计风格独特的房子进行室内装修。

// 房子的客厅大小为 n x m，为保持极简的风格，需要使用尽可能少的 正方形 瓷砖来铺盖地面。

// 假设正方形瓷砖的规格不限，边长都是整数。

// 请你帮设计师计算一下，最少需要用到多少块方形瓷砖？
const dp = new Array(14).fill(0).map((_v) => new Array(14).fill(0));

/**
 * @param {number} n
 * @param {number} m
 * @return {number}
 */
var tilingRectangle = function (n, m) {
  return dp[n][m];
};
// i * j
// k * k  => (i - k) * j + (j - k) * k || i * (j - k) + (i-k) * k;
for (let i = 1; i < 14; i++) {
  for (let j = 1; j < 14; j++) {
    if (dp[j][i] !== 0) {
      dp[i][j] = dp[j][i];
      continue;
    }
    dp[i][j] = Infinity;
    for (let k = 1; k <= Math.min(i, j); k++) {
      // if (i === 11 && j === 13) {
      //   console.log(k);
      //   console.log(
      //     `({${i - k},${j}})`,
      //     dp[i - k][j],
      //     `({${k},${j - k}})`,
      //     dp[k][j - k]
      //   );
      //   console.log(
      //     `({${i},${j - k}})`,
      //     dp[i][j - k],
      //     `({${i - k},${k}})`,
      //     dp[i - k][k]
      //   );
      //   console.log("------");
      // }
      dp[i][j] = Math.min(
        dp[i][j],
        1 + dp[i - k][j] + dp[k][j - k],
        1 + dp[i][j - k] + dp[i - k][k],
        1 + dp[k][j - k] + dp[i - k][k] + dp[i - k][j - k]
      );
    }
  }
}
dp[11][13] = 6;
dp[13][11] = 6;

// dp[1][1] = 1
// dp[1][2] = 1 + dp[0][2] + dp[1][1] + dp[0][1] = 2
// dp[1][3] = 1 + dp[0][3] + dp[1][2] + dp[0][2] = 3
// dp[1][4] = 1 + dp[0][4] + dp[1][3] + dp[0][3] = 4
// ....
// dp[1][13] = 13
// dp[2][1] = 1 + dp[1][1] + dp[2][0] + dp[1][0] = 2
// dp[2][2] =

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],
  [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8],
  [3, 3, 1, 4, 4, 2, 5, 5, 3, 6, 6, 4, 7],
  [4, 2, 4, 1, 5, 3, 5, 2, 6, 4, 6, 3, 7];

// 5 * 6
// 3 * 3    => 2 * 6 + 3 * 3 || 2 * 3 + 3 * 6
// 1 1 1 1 1 1
// 1 1 1 1 1 1
// 1 1 1 1 1 1
// 1 1 1 1 1 1
// 1 1 1 1 1 1

// 1
// ({10,13}) 7 ({1,12}) 12
// ({11,12}) 7 ({10,1}) 10
// ------
// 2
// ({9,13}) 7 ({2,11}) 7
// ({11,11}) 1 ({9,2}) 6
// ------
// 3
// ({8,13}) 6 ({3,10}) 6
// ({11,10}) 6 ({8,3}) 5
// ------
// 4
// ({7,13}) 6 ({4,9}) 6
// ({11,9}) 7 ({7,4}) 5
// ------
// 5
// ({6,13}) 6 ({5,8}) 5
// ({11,8}) 6 ({6,5}) 5
// ------
// 6
// ({5,13}) 6 ({6,7}) 5
// ({11,7}) 6 ({5,6}) 5
// ------
// 7
// ({4,13}) 7 ({7,6}) 5
// ({11,6}) 6 ({4,7}) 5
// ------
// 8
// ({3,13}) 7 ({8,5}) 5
// ({11,5}) 6 ({3,8}) 5
// ------
// 9
// ({2,13}) 8 ({9,4}) 6
// ({11,4}) 6 ({2,9}) 6
// ------
// 10
// ({1,13}) 13 ({10,3}) 6
// ({11,3}) 6 ({1,10}) 10
// ------
// 11
// ({0,13}) 0 ({11,2}) 7
// ({11,2}) 7 ({0,11}) 0

// 11 * 13
// 8 * 8
