/*
 * @Author: mangwu                                                             *
 * @File: main.js                                                              *
 * @Date: 2022-08-29 09:13:56                                                  *
 * @LastModifiedDate: 2022-08-29 11:21:49                                      *
 * @ModifiedBy: mangwu                                                         *
 * -----------------------                                                     *
 * Copyright (c) 2022 mangwu                                                   *
 * -----------------------                                                     *
 * @HISTORY:                                                                   *
 * Date   	            By 	    Comments                                       *
 * ---------------------	--------	----------------------------------------------- *
 */

// 给你一个数组 nums ，数组中有 2n 个元素，按 [x1,x2,...,xn,y1,y2,...,yn] 的格式排列。

// 请你将数组按 [x1,y1,x2,y2,...,xn,yn] 格式重新排列，返回重排后的数组。

/**
 * @param {number[]} nums
 * @param {number} n
 * @return {number[]}
 */
var shuffle = function (nums, n) {
  let left = 0;
  let right = n;
  const ans = [];
  while (left < n) {
    ans.push(nums[left]);
    ans.push(nums[right]);
    left++;
    right++;
  }
  return ans;
};

// [2,5,1,3,4,7]
// [2,3,1,5,4,7]
//,[2,3,5,4,1,7]
/**
 * @param {number[]} nums
 * @param {number} n
 * @return {number[]}
 */
var shuffle = function (nums, n) {
  let left = 1;
  // 原地算法
  while (left < n) {
    for (let i = left; i < n; i++) {
      [nums[i], nums[n + i - left]] = [nums[n + i - left], nums[i]];
    }
    left++;
  }
  return nums;
};

// 如果left等于1，就

// [1,2,3,4,5,6,7,8] 1 4
// [1,5,3,4,2,6,7,8] 2 5
// [1,5,2,6,3,4,7,8] 3 6
// [1,5,2,6,3,8,4,8] 4 7

// [1,2,3,4,5,6,7,8,9,10]
// [1,6,3,4,5,2,7,8,9,10]
// [1,6,2,7,5,3,4,8,9,10]
// [1,6,2,7,3,9,5,4,9,10]
// [1,6,2,7,3,9,4,9,5,10]

// [1,2,3,4,5,6,7,8,9,10]
// [1,6,3,4,5,2,7,8,9,10]
// [1,6,2,4,5,3,7,8,9,10]
// [1,6,2,7,5,3,4,8,9,10]
// [1,6,2,7,3,5,4,8,9,10]
// [1,6,2,7,3,8,4,5,9,10]
// []

// [1,2,3,4,5,6,7,8,9,10]
// [1,6,7,8,9,2,3,4,5,10]
// [1,6,2,3,4,7,8,9,5,10]
// [1,6,2,7,8,3,4,9,5,10]
// [1,6,2,7,3,8,4,9,5,10]
// [2,5,1,3,4,7]
// [2,3,4,5,1,7]
// [2,3,5,4,1,7]

// [2,3,1,5,4,7]
// [2,3,1,5,4,7]
// [1,2,3,4,5,6,7,8,9,10] 0
// [1,6,3,4,5,2,7,8,9,10] 6
// [1,6,2,4,5,3,7,8,9,10] 6
// [1,6,2,7,5,3,4,8,9,10] 8

/**
 * @param {number[]} nums
 * @param {number} n
 * @return {number[]}
 */
var shuffle = function (nums, n) {
  // 每次都能找到下一个前半的元素索引就可以
  // 当前下一个前半索引
  let idx = 0;
  // 后半的索引
  let right = n;
  // 需要替换的索引
  let left = 0;
  while (right < 2 * n - 1) {
    // 替换获取前半索引
    [nums[idx], nums[left]] = [nums[left], nums[idx]];
    // 替换后半，需要增减left
    left++;
    // 将后半元素提到前面
    [nums[left], nums[right]] = [nums[right], nums[left]];
    // 下一个前半索引
  }
};

// [1,2,3,4,5,6,7,8,9,10] 0
// [1,6,3,4,5,2,7,8,9,10] 5
// [1,6,2,7,5,3,4,8,9,10] 5
// [1,6,2,7,3,8,4,5,9,10] 6
// [1,6,2,7,3,8,4,9,5,10]

// [1,2,3,4,5,6,7,8,9,10,11,12]
// [1,7,3,4,5,6,2,8,9,10,11,12] 6
// [1,7,2,8,5,6,3,4,9,10,11,12] 6
// [1,7,2,8,3,9,5,4,6,10,11,12] 7
// [1,7,2,8,3,9,4,10,6,5,11,12] 9
// [1,7,2,8,3,9,4,10,5,11,6,12] 10

// [1,2,3,4,5,6,7,8,9,10,11,12,13,14]
// [1,8,3,4,5,6,7,2,9,10,11,12,13,14] 7
// [1,8,2,9,5,6,7,3,4,10,11,12,13,14] 7
// [1,8,2,9,3,10,7,5,4,6,11,12,13,14] 8
// [1,8,2,9,3,10,4,11,7,6,5,12,13,14] 10
// [1,8,2,9,3,10,4,11,5,12,7,6,13,14] 12
// [1,8,2,9,3,10,4,11,5,12,6,13,7,14] 14

// [1,2,3,4,5,6,7,8,  9,10,11,12,13,14,15,16]
// [1,9,3,4,5,6,7,8,  2,10,11,12,13,14,15,16] 8
// [1,9,2,10,5,6,7,8,  3,4,11,12,13,14,15,16] 8
// [1,9,2,10,3,11,7,8,  5,4,6,12,13,14,15,16] 9
// [1,9,2,10,3,11,4,12,  5,7,6,8,13,14,15,16] 8
// [..................,  5,13,6,8,7,14,15,16] 10
// [..................,  5,13,6,14,7,8,15,16] 12 

/**
 * @param {number[]} nums
 * @param {number} n
 * @return {number[]}
 */
var shuffle = function (nums, n) {
  // 位运算
  for (let i = 0; i < 2 * n; i++) {
    // 对应位置 的索引
    let j = i < n ? 2 * i : 2 * (i - n) + 1;
    // 将对应位置的索引的元素值保存在当前数中
    // 即nums[j]所在位置的值应该保存当前位置值
    nums[j] |= (nums[i] & 1023) << 10;
  }
  // 将所有数右移10位
  nums.forEach((v, i) => {
    nums[i] = v >> 10;
  });
  return nums;
};

// 0 2

/**
 * @param {number[]} nums
 * @param {number} n
 * @return {number[]}
 */
var shuffle = function (nums, n) {
  // 负数标记法
  // 因为所有数都是正数，所以可以使用负数标记已经排列好的元素
  for (let i = 0; i < 2 * n; i++) {
    if (nums[i] > 0) {
      // 说明该数没有排列好 需要替换到要排序的索引里去
      // 而每次替换后，这个位置变为一个新数，新数如果还是正数，说明新数需要替换
      // 而新数的原始索引就是上次替换获取的索引
      // 当通过上次替换的索引获取新数的索引相等时，这个时候就可以退出循环了
      let j = i;
      while (nums[i] > 0) {
        j = j < n ? 2 * j : 2 * (j - n) + 1;
        nums[i] = -nums[i];
        // 替换
        [nums[i], nums[j]] = [nums[j], nums[i]];
      }
    }
  }
  nums.forEach((v, i) => {
    nums[i] = -v;
  });
  return nums;
};
