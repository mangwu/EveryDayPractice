/*
 * @Author: mangwu                                                             *
 * @File: main.js                                                              *
 * @Date: 2023-08-30 08:54:08                                                  *
 * @LastModifiedDate: 2023-08-30 14:45:21                                      *
 * @ModifiedBy: mangwu                                                         *
 * -----------------------                                                     *
 * Copyright (c) 2023 mangwu                                                   *
 * -----------------------                                                     *
 * @HISTORY:                                                                   *
 * Date   	            By 	    Comments                                       *
 * ---------------------	--------	----------------------------------------------- *
 */

// 相关企业
// 有一只跳蚤的家在数轴上的位置 x 处。请你帮助它从位置 0 出发，到达它的家。

// 跳蚤跳跃的规则如下：

// 它可以 往前 跳恰好 a 个位置（即往右跳）。
// 它可以 往后 跳恰好 b 个位置（即往左跳）。
// 它不能 连续 往后跳 2 次。
// 它不能跳到任何 forbidden 数组中的位置。
// 跳蚤可以往前跳 超过 它的家的位置，但是它 不能跳到负整数 的位置。

// 给你一个整数数组 forbidden ，其中 forbidden[i] 是跳蚤不能跳到的位置，同时给你整数 a， b 和 x ，请你返回跳蚤到家的最少跳跃次数。如果没有恰好到达 x 的可行方案，请你返回 -1 。

/**
 * @param {number[]} forbidden
 * @param {number} a
 * @param {number} b
 * @param {number} x
 * @return {number}
 */
var minimumJumps = function (forbidden, a, b, x) {
  // 先判断 a * m - b * n = x 能否成立，其中m和n是非负数
  // m = (x + b * n) / a
  // 计算出最小的m和n的值
  if (x === 0) return 0;
  // 有可能永远不会成立
  // let n = 0;
  // const set = new Set();
  // while ((x + b * n) % a !== 0) {
  //   const cur = (x + b * n) % a;
  //   if (set.has(cur)) return -1;
  //   set.add(cur);
  //   n++;
  // }
  // let m = (x + b * n) / a;
  // 判断能否得出一个路径，其中经过的顶点不在forbidden数组中
  const forbiddenSet = new Set(forbidden);
  if (forbiddenSet.has(x)) return false;
  // 将所有能达到的数对入队，使用BFS判断能否达到(m,n)
  let queue = [[0, 0, true]]; // 还需要有一个表示当前是否必须向前跳跃
  const visited = new Set();
  visited.add(`0t`);
  const upper = Math.max(Math.max(...forbidden) + a, x) + b;
  console.log(upper);
  while (queue.length) {
    const next = [];
    for (const [i, j, flag] of queue) {
      const [nx1, ny1] = [i + 1, j]; // 向前跳跃
      const [nx2, ny2] = [i, j + 1]; // 先后跳跃
      const cur1 = nx1 * a - ny1 * b;
      const id1 = `${nx1},${ny1}f`;
      const cur2 = nx2 * a - ny2 * b;
      const id2 = `${nx2},${ny2}t`;
      if (cur1 === x) return nx1 + ny1;
      if (cur2 === x && !flag) return nx1 + ny1;
      if (
        nx1 <= upper &&
        ny1 <= upper &&
        cur1 <= upper &&
        !forbiddenSet.has(cur1) &&
        cur1 >= 0 &&
        !visited.has(id1)
      ) {
        visited.add(id1);
        next.push([nx1, ny1, false]);
      }
      if (
        nx2 <= upper &&
        ny2 <= upper &&
        !flag && // 判断是否只能向前跳跃
        cur2 <= upper &&
        !forbiddenSet.has(cur2) &&
        cur2 >= 0 &&
        !visited.has(id2)
      ) {
        visited.add(id2);
        next.push([nx2, ny2, true]);
      }
    }
    console.log(next);
    queue = next;
  }
  return -1;
};
// a    b    x    for
// 1999 2000 2000 [1998]
console.log(
  minimumJumps(
    [
      1906, 1988, 1693, 483, 900, 1173, 805, 1593, 1208, 1084, 300, 614, 1325,
      783, 1104, 1450, 311, 1506, 1388, 1567, 1497, 47, 102, 338, 1937, 888,
      111, 195, 1041, 1570, 686, 1707, 1521, 1566, 74, 1264, 667, 1486, 960,
      389, 442, 329, 1577, 1557, 1494, 1382, 1688, 779, 484, 410, 227, 1025,
      1417, 1475, 1042, 1903, 1920, 1712, 870, 1813, 1137, 1732, 18, 1065, 1653,
      1289, 1636, 147, 1833, 1168, 1087, 1408, 881, 1129, 71, 924, 1718, 1458,
      371, 597, 1790, 889, 414, 784, 1883, 6, 1650, 1549, 552, 1233, 1467, 1514,
      1568, 211, 1301, 772, 377, 1751, 1699, 1701, 1214, 1874, 324, 1991, 1006,
      1413, 41, 289, 1274, 802, 1892, 1908, 1960, 1635, 69, 423, 1795, 96, 1024,
      1596, 1044, 1513, 1390, 711, 1806, 1298, 968, 1160, 1232, 1315, 1646,
      1178, 169, 1295, 466, 44, 10, 1250, 1283, 927, 49, 267, 1773, 342, 1828,
      1949, 1291, 244, 707, 408, 798, 938, 1542, 690, 639, 1148, 1081, 431, 752,
      120, 1125, 339, 480, 247, 733, 266, 596, 987, 777, 214, 1005, 1687, 160,
      785, 1010, 1282, 1135, 922, 671, 1221, 250, 1982, 398, 1959, 179, 325,
      1313, 577, 1053, 1436, 185, 1014, 1851, 1685, 1143, 1510, 1972, 830, 681,
      390, 972, 1003, 844, 229, 1246, 1257, 668, 1765, 619, 276, 1355, 1544,
      1842, 1340, 1375, 1944, 790, 606, 345, 1487, 796, 1985, 1673, 1503, 180,
      1642, 498, 1805, 201, 104, 1658, 1633, 1507, 1142, 541, 865, 1193, 485,
      216, 1849, 359, 1422, 391, 856, 1864, 470, 1888, 1698, 760, 1778, 572,
      1057, 48, 189, 1086, 1704, 1258, 192, 825, 585, 152, 1865, 1645, 807, 225,
      402, 1198, 1476, 600, 1914, 975, 1378, 1190, 24, 1550, 723, 696, 1131,
      1831, 1880, 1029, 713, 486, 126, 876, 1270, 1891, 544, 61, 1356, 1676,
      1239, 36, 1177, 620, 1723, 1651, 1136, 141, 1889, 1123, 624, 1519, 725,
      241, 1253, 1119, 269, 763, 1120, 1620, 642, 1713, 966, 1204, 558, 1344,
      550, 316, 412, 886, 1309, 1648, 599, 1893, 265, 258, 1561, 477, 1967, 66,
      1296, 75, 1628, 715, 826, 1942, 1966, 1407, 159, 646, 1438, 1730, 768,
      411, 287, 499, 467, 46, 302, 661, 526, 848, 1327, 1097, 166, 413, 1578,
      574, 1304, 925, 504, 914, 978, 1352, 1103, 1859, 1167, 1318, 1454, 1990,
      739, 1252, 132, 529, 1622, 422, 1744, 1819, 425, 945, 1767, 1791, 976,
      1226, 1092, 305, 479, 174, 626, 1063, 662, 1948, 1978, 524, 512, 1255,
      651, 1678, 1059,
    ],
    806,
    1994,
    326
  )
);
