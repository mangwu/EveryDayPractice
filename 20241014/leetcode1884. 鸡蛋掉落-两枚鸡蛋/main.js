/*
 * @Author: mangwu                                                             *
 * @File: main.js                                                              *
 * @Date: 2024-10-14 01:37:20                                                  *
 * @LastModifiedDate: 2024-10-14 02:34:37                                      *
 * @ModifiedBy: mangwu                                                         *
 * -----------------------                                                     *
 * Copyright (c) 2024 mangwu                                                   *
 * -----------------------                                                     *
 * @HISTORY:                                                                   *
 * Date   	            By 	    Comments                                       *
 * ---------------------	--------	----------------------------------------------- *
 */

// 给你 2 枚相同 的鸡蛋，和一栋从第 1 层到第 n 层共有 n 层楼的建筑。

// 已知存在楼层 f ，满足 0 <= f <= n ，任何从 高于 f 的楼层落下的鸡蛋都 会碎 ，从 f 楼层或比它低 的楼层落下的鸡蛋都 不会碎 。

// 每次操作，你可以取一枚 没有碎 的鸡蛋并把它从任一楼层 x 扔下（满足 1 <= x <= n）。如果鸡蛋碎了，你就不能再次使用它。如果某枚鸡蛋扔下后没有摔碎，则可以在之后的操作中 重复使用 这枚鸡蛋。

// 请你计算并返回要确定 f 确切的值 的 最小操作次数 是多少？

/**
 * @param {number} n
 * @return {number}
 */
var twoEggDrop = function (n) {
  const dp = new Array(n + 1).fill(Infinity);
  dp[0] = 0;
  // dp[i]的获取：遍历1-i-1中的楼层j,
  // 1. 如果当前楼层鸡蛋碎了，只有一个鸡蛋，说明答案范围是在[0, j-1]之间，只能在1,2,3...j-1依次扔鸡蛋,要扔j次
  // 2. 如果没碎，那么还有两枚鸡蛋，等价于i - j 楼层的子问题即dp[i-k]
  for (let i = 1; i <= n; i++) {
    for (let j = 1; j <= i; j++) {
      // 在楼层j扔鸡蛋
      dp[i] = Math.min(dp[i], Math.max(j, dp[i - j] + 1));
    }
  }
  return dp[n];
};
