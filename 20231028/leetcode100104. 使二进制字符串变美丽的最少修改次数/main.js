// 给你一个长度为偶数下标从 0 开始的二进制字符串 s 。

// 如果可以将一个字符串分割成一个或者更多满足以下条件的子字符串，那么我们称这个字符串是 美丽的 ：

// 每个子字符串的长度都是 偶数 。
// 每个子字符串都 只 包含 1 或 只 包含 0 。
// 你可以将 s 中任一字符改成 0 或者 1 。

// 请你返回让字符串 s 美丽的 最少 字符修改次数。

/**
 * @param {string} s
 * @return {number}
 */
var minChanges = function (s) {
  // 从第一位开始计算相同字符的个数
  const n = s.length;
  let ans = 0;
  for (let i = 0; i < n; i++) {
    let pre = s[i];
    let j = i + 1;
    while (j < n && s[j] === pre) {
      j++;
    }
    // s[j]不等于pre
    if (j === n) break; // j - i一定是偶数
    if ((j - i) % 2 === 0) {
      // 偶数个连续相同的数
      i = j - 1;
    } else {
      // 奇数个连续相同的数，且从s[j]开始不同
      // 将s[j-1]变成pre即可
      i = j;
      ans++;
    }
  }
  return ans;
};

// 000110
// 0001101011010011101001011101
//    12  3   4     56  7 8  9
//    00  1   0     10  0 0  1   