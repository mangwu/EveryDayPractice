/*
 * @Author: mangwu                                                             *
 * @File: main.js                                                              *
 * @Date: 2022-02-24 08:34:01                                                  *
 * @LastModifiedDate: 2022-02-24 09:22:40                                      *
 * @ModifiedBy: mangwu                                                         *
 * -----------------------                                                     *
 * Copyright (c) 2022 mangwu                                                   *
 * -----------------------                                                     *
 * @HISTORY:                                                                   *
 * Date   	            By 	    Comments                                       *
 * ---------------------	--------	----------------------------------------------- *
 */

// 用一个大小为 m x n 的二维网格 grid 表示一个箱子。你有 n 颗球。箱子的顶部和底部都是开着的。

// 箱子中的每个单元格都有一个对角线挡板，跨过单元格的两个角，可以将球导向左侧或者右侧。

// 将球导向右侧的挡板跨过左上角和右下角，在网格中用 1 表示。
// 将球导向左侧的挡板跨过右上角和左下角，在网格中用 -1 表示。
// 在箱子每一列的顶端各放一颗球。每颗球都可能卡在箱子里或从底部掉出来。如果球恰好卡在两块挡板之间的 "V" 形图案，或者被一块挡导向到箱子的任意一侧边上，就会卡住。

// 返回一个大小为 n 的数组 answer ，其中 answer[i] 是球放在顶部的第 i 列后从底部掉出来的那一列对应的下标，如果球卡在盒子里，则返回 -1 。

/**
 * @param {number[][]} grid
 * @return {number[]}
 */
var findBall = function (grid) {
  // grid的长度和高度是箱子的长度和高度
  // m * n; 遍历n次，从每个column出发，得到每个球的结果
  // 每个球最多遍历m次，每层判断是否能到下一层
  // 判断方式：当前位置如果是1，说明右移动，检查右边位置的是否也是1，是就移到下一个位置（[x+1,y+1]）,否则就被堵死
  // 当前位置是-1，说明左移动，检查左边位置是否也是-1，是就移动到下一个位置，否则堵死
  const m = grid.length;
  const n = grid[0].length;
  const ans = new Array(n).fill(1);
  // 从左到右遍历n次
  for (let i = 0; i < n; i++) {
    // 开始遍历每个球的位置遍历，查看当前位置的值
    let ni = i;
    for (let j = 0; j < m; j++) {
      // 第j层的第i个位置
      const cur = grid[j][ni];
      if (cur == 1) {
        // 右移，右边位置是否也为1
        if (ni + 1 < n && grid[j][ni + 1] == 1) {
          // 自增
          ni++;
          continue;
        } else {
          // 否则是被堵死的
          ans[i] = -1;
          break;
        }
      } else {
        // 左移，左边位置是否也为-1
        if (ni - 1 >= 0 && grid[j][ni - 1] == -1) {
          // 自减
          ni--;
          continue;
        } else {
          // 否则被堵死
          ans[i] = -1;
          break;
        }
      }
    }
    // 如果未被卡死，就保存ni
    if (ans[i] !== -1) {
      ans[i] = ni;
    }
  }
  return ans;
};

findBall([[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]])